---
title: "RFBO Acceleration"
---

```{r}
#| include: false
library(targets)
library(tidyverse)

# Specifying the store makes "Run Document" work
tar_load(c("rfbo_acc", "rfbo_acc_El"), store = here::here("_targets"))
```

## Acceleration summary

Acceleration was collected in 30 s bursts at 20 Hz.

## Estimating flight behavior

Heave (dorso-ventral acceleration) exhibits greater amplitude during flapping than gliding flight [@ropert-coudert2003; @kato2003; @weimerskirch2005]. Therefore flapping and gliding flight behaviors may be differentiated by patterns in the heave waveform.

The heave waveform is composed of two components: 1) a low-frequency signal from the interaction of body orientation and gravity, and 2) a high-frequency signal from dynamic movement like flapping. To classify flight behavior, I will de-trend heave to remove the low-frequency component and calculate the *local energy* ($E_l$) of the high-frequency component, which should be bi-modally distributed.

The energy of a signal ($E_s$) is the sum of the square of the signal's magnitude (Eq. @eq-energy ). The local energy is defined as the energy of the signal in a sliding window of width $w$.

$$
E_s=\sum_{n=-\infty}^{\infty}{|x(n)|^2}
$$ {#eq-energy}

The sliding window should be large enough to capture a complete peak-to-peak cycle in heave. The flapping frequency of RFBOs was previously identified as 3.7 Hz [@weimerskirch2005], so I chose $1 / 3.7 = 0.27 s$ for $w$, which covers 5 acceleration samples at 20 Hz.

Here's the distribution of the local energy of heave across HMM-decoded behavioral states. No clear patterns emerging. I'll generate some diagnostic plots for randomly selected acceleration bursts. Check the following:

1.  De-trended heave passes sanity check
2.  Verify wing flapping pattern
3.  Verify $E_l$ increases during flapping
4.  Verify z-axis and heave are one and the same across all tags

```{r}
#| label: heave_El

rfbo_acc_El %>% 
  mutate(state = factor(state,
                        levels = 1:3,
                        labels = c("rest", "search", "transit"))) %>% 
  # TODO: fix this
  rename(z_El = `substr(z_high, 1, 1)_El`) %>% 
  filter(state != "rest") %>% 
  ggplot(aes(z_El)) +
  geom_density(aes(fill = state), alpha = 0.5) +
  geom_density(aes(color = state)) +
  facet_wrap(~ id, scales = "free_y") +
  xlim(0, 1e5) +
  theme_classic()

```
